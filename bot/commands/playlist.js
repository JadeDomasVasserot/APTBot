import { SlashCommandBuilder } from "discord.js";
import { execSync } from "child_process";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import ytpl from "ytpl";
import { queue, addToQueue, playMusic } from "../musicQueue.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const musicFolder = path.join(__dirname, "../musics");

// üìÇ V√©rifier si le dossier `musics/` existe, sinon le cr√©er
if (!fs.existsSync(musicFolder)) {
  fs.mkdirSync(musicFolder, { recursive: true });
}

// üî† Fonction pour nettoyer le titre (supprime les caract√®res interdits mais conserve les espaces)
function sanitizeTitle(title) {
  return title.replace(/[<>:"/\\|?*]/g, "").trim();
}

export default {
  data: new SlashCommandBuilder()
    .setName("playlist")
    .setDescription("T√©l√©charge et ajoute une playlist YouTube √† la queue, une par une")
    .addStringOption(option =>
      option.setName("url").setDescription("Lien de la playlist YouTube").setRequired(true)
    ),

  async execute(interaction) {
    await interaction.deferReply();
    const url = interaction.options.getString("url");

    if (!interaction.member.voice.channel) {
      return interaction.editReply("‚ùå Tu dois √™tre dans un salon vocal !");
    }

    try {
      // üìú **1. R√©cup√©rer la playlist YouTube**
      const playlist = await ytpl(url);
      console.log("üìú Playlist r√©cup√©r√©e :", playlist);
      if (!playlist.items.length) {
        return interaction.editReply("‚ùå Impossible de r√©cup√©rer la playlist.");
      }

      await interaction.editReply(`üìú **T√©l√©chargement de ${playlist.items.length} musiques...** üé∂`);

      let addedCount = 0;
      let serverQueue = queue.get(interaction.guildId);
      let isPlaying = serverQueue && serverQueue.songs.length > 0;

      // üéµ **2. T√©l√©charger chaque musique individuellement et l'ajouter imm√©diatement**
      for (const video of playlist.items) {
        const safeTitle = sanitizeTitle(video.title);
        const fileName = `${safeTitle} - ${video.id}.mp3`; // üî• Format propre avec ID YouTube
        const expectedFilePath = path.join(musicFolder, fileName);

        console.log(`üîç V√©rification du fichier : ${expectedFilePath}`);

        // üìÇ **V√©rifier si la musique est d√©j√† t√©l√©charg√©e**
        if (fs.existsSync(expectedFilePath)) {
          console.log(`‚úÖ ${safeTitle} d√©j√† t√©l√©charg√©.`);
          await addToQueue(interaction, { filePath: expectedFilePath, title: safeTitle });
          addedCount++;

          // üöÄ D√©marrer la lecture si rien ne joue encore
          if (!isPlaying) {
            isPlaying = true;
            playMusic(interaction, interaction.guildId);
          }

          // ‚úÖ Mettre √† jour Discord avec la musique ajout√©e
          await interaction.editReply(`‚úÖ **${safeTitle}** ajout√© √† la queue ! üé∂`);
          continue;
        }

        // ‚è¨ **T√©l√©charger la musique et attendre la fin avant de passer √† la suivante**
        try {
          console.log(`‚è¨ T√©l√©chargement de : ${safeTitle}`);
          const actualFilePath = await downloadMusic(video.url, safeTitle, video.id, musicFolder);

          console.log(`üìÇ Fichier t√©l√©charg√© : ${actualFilePath}`);
          await addToQueue(interaction, { filePath: actualFilePath, title: safeTitle });
          addedCount++;

          // üöÄ D√©marrer la lecture d√®s qu'une musique est pr√™te
          if (!isPlaying) {
            isPlaying = true;
            playMusic(interaction, interaction.guildId);
          }

          // ‚úÖ Mettre √† jour Discord apr√®s chaque ajout
          await interaction.editReply(`‚úÖ **${safeTitle}** t√©l√©charg√© et ajout√© √† la queue ! üé∂`);
        } catch (error) {
          console.error(`‚ùå Erreur lors du t√©l√©chargement de ${safeTitle}`, error);
        }
      }

      // üìú **Confirmation finale**
      await interaction.editReply(`üéâ **Playlist termin√©e ! ${addedCount} musiques ajout√©es.** üé∂`);

    } catch (error) {
      console.error(error);
      interaction.editReply("‚ùå Erreur lors du chargement de la playlist.");
    }
    setTimeout(async () => {
      try {
        await interaction.deleteReply();
      } catch (error) {
        console.log("‚ö† Impossible de supprimer le message (peut-√™tre d√©j√† supprim√©).");
      }
    }, 15000); // 30 sec (15000 ms)
  },
};

/**
 * üì• **T√©l√©charge une musique avec yt-dlp et retourne son chemin**
 */
function downloadMusic(url, title, videoId, folder) {
  return new Promise((resolve, reject) => {
    const safeTitle = sanitizeTitle(title);
    const outputFileName = `${safeTitle} - ${videoId}.mp3`; // üî• Format uniforme
    const outputPath = path.join(folder, outputFileName);

    const command = `yt-dlp -x --audio-format mp3 --audio-quality 5 --force-overwrites --no-playlist --concurrent-fragments 5 --throttled-rate 0 \
-o "${outputPath}" "${url}"`;

    console.log(`üîÑ Ex√©cution de la commande : ${command}`);

    try {
      execSync(command, { stdio: "inherit" });

      // V√©rifier si le fichier a bien √©t√© t√©l√©charg√©
      if (fs.existsSync(outputPath)) {
        console.log(`üìÇ Fichier t√©l√©charg√© trouv√© : ${outputPath}`);
        resolve(outputPath);
      } else {
        console.error(`‚ùå Fichier introuvable apr√®s t√©l√©chargement : ${safeTitle}`);
        reject(new Error(`Fichier non trouv√© : ${safeTitle}`));
      }
    } catch (error) {
      console.error(`‚ùå Erreur lors du t√©l√©chargement de ${safeTitle}:`, error);
      reject(error);
    }
  });
}
